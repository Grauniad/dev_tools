# makefile tools library for bulding multi-directory projects
#
# Luke Humphreys 2012
 
# This project requires the C++11 standard
ADDITIONAL_INCLUDE_FLAGS=
ADDITIONAL_TEST_CPP_FLAGS=

#Define the base directories
ifndef PROJECT_ROOT_DIR
   $(error PROJECT_ROOT_DIR must be specified!)
endif

ifndef DEV_TOOLS_DIR
   $(error DEV_TOOLS_DIR must point to the root of the dev_tools depot)
endif

EXPORTS_DIR=$(PROJECT_ROOT_DIR)exports/
SCRIPTS_DIR=$(DEV_TOOLS_DIR)Scripts/

# Define the internal file structure
EXPORT_TESTS_TO=$(EXPORTS_DIR)tests/
EXPORT_INCLUDES_DIR=$(EXPORTS_DIR)includes/
EXPORT_OBJS_DIR=$(EXPORTS_DIR)objs/
EXPORT_LIB_DIR=$(EXPORTS_DIR)lib/
EXPORT_PROFILE_DIR=$(EXPORTS_DIR)profs/
EXPORT_COVER_DIR=$(EXPORTS_DIR)coverage/

ifndef TAGS_DIR
    EXPORT_TAGS_DIR=$(EXPORTS_DIR)tags/
else
    EXPORT_TAGS_DIR=$(TAGS_DIR)
endif

ifndef WEB_VIEWER
    WEB_VIEWER=firefox
endif


#
#  CONFIGURE COMPILER
#

# Compilation variables
#
DEBUG_FLAGS=-ggdb
CPPSTD=gnu++98 #(overridden by USE_CPP11)

ifeq ($(USE_CPP11),YES)
  CPPSTD=c++11
endif

# Set to YES to enable
ifndef DEBUG_ON
    DEBUG_ON=YES
endif

# If yes, build will if any warnings are raised
ifndef FATAL_WARNINGS
   FATAL_WARNINGS=YES
endif

ifndef USE_CPP11
   USE_CPP11=NO
endif


#
#  CONFIGURE TAGS
#
ifndef CTAGS
    CTAGS=ctags
endif
ifndef
    CTAGS_FLAGS=-R --sort=1 --c++-kinds=+p --fields=+iaS --extra=+q --language-force=C++ --tag-relative=no
endif


#
# Configure Debuggers
#

ifndef VALGRIND_OPTIONS
    VALGRIND_OPTIONS=--leak-check=full
    # Report the source of unintialised errors
    VALGRIND_OPTIONS+=--track-origins=yes
    # RAM is cheap
    VALGRIND_OPTIONS+=--freelist-vol=2000000000
    # Should run silently for regression tests, only report errors
    VALGRIND_OPTIONS+=--quiet
    # Fail the build if an error is found
    VALGRIND_OPTIONS+=--error-exitcode=1
    # Report any file handles that haven't been cleaned up
    VALGRIND_OPTIONS+=--track-fds=yes
    # Using a (vim!) wrapper that allows us to easily handle large call stacks
    VALGRIND_OPTIONS+=--num-callers=50
    # For easy debugging
    VALGRIND_OPTIONS+=--fullpath-after=
endif

ifndef GDB_OPTIONS
   # Use terminal user interface (display source code)
   GDB_OPTIONS=-tui 
   # Source the command file in the root directory 
   #  - define break points here
   #  - defines the code that auto-starts and cleans up the test
   GDB_OPTIONS+=-x $(PROJECT_ROOT_DIR)/.gdb_breakpoints 
   GDB_OPTIONS+=-x $(PROJECT_ROOT_DIR)/.gdb_setup 
   # We want the test return code to test success
   GDB_OPTIONS+=-return-child-result
endif

#
# Build up cpp flags
# 
# These should be configured above
# DO NOT CHANGE THESE UNLESS YOU KNOW WHAT YOU ARE DOING
INCLUDE_FLAGS=-I$(EXPORT_INCLUDES_DIR)
INCLUDE_FLAGS+=$(ADDITIONAL_INCLUDE_FLAGS)

# Expose libDefer to the test framework
# Make the defer header available for use in test scripts
TEST_CPP_FLAGS=-I$(LINKER_DIR)Libraries/libDefer/
TEST_CPP_FLAGS+=$(ADDITIONAL_TEST_CPP_FLAGS)


ifdef CPP_FLAGS
    CPP_FLAGS+=$(INCLUDE_FLAGS)
else
    CPP_FLAGS=$(INCLUDE_FLAGS)
endif

ifndef CPP_PROFILE_FLAGS
    CPP_PROFILE_FLAGS=-pg -O2 -march=native
endif

ifeq ($(findstring profile,$(MAKECMDGOALS)),profile)
   CPP_FLAGS+=-D__PROFILE__TESTS -D__PROFILE_CLOCK_SECS__=$(PROFILE_SECS) $(CPP_PROFILE_FLAGS)
   ifndef PROFILE_SECS
      PROFILE_SECS=5
   endif
   DEBUG_ON=FALSE
endif

ifeq ($(FATAL_WARNINGS),YES)
  CPP_FLAGS+=-Werror
endif

ifeq ($(DEBUG_ON),YES)
  CPP_FLAGS+=$(DEBUG_FLAGS)
endif


ifeq ($(findstring cover,$(MAKECMDGOALS)),cover)
   CPP_FLAGS+=--coverage
endif


CPP_FLAGS+=-std=$(CPPSTD)

# calculate variables used for macros 
# DO NOT CHANGE THESE UNLESS YOU KNOW WHAT YOU ARE DOING
BUILD_DEPS=BUILD_FOLDERS 
TO_CLEAN=FOLDERS_TO_CLEAN FILES_TO_CLEAN
TO_BUILD=
FILES_TO_CLEAN=
FOLDERS_TO_CLEAN=
LINKED_FILES=
CPP_TAGS_TO_BUILD=
TO_COPY=

ifeq ($(findstring cover,$(MAKECMDGOALS)),cover)
   $(shell mkdir -p $(EXPORT_COVER_DIR))
endif

ifdef SOURCES
   $(shell mkdir -p $(EXPORT_OBJS_DIR))
   TO_BUILD+=$(addprefix $(EXPORT_OBJS_DIR),$(SOURCES:%.cpp=%.o))
   FILES_TO_CLEAN+=$(addprefix $(EXPORT_OBJS_DIR),$(SOURCES:%.cpp=%.gcno))
   FILES_TO_CLEAN+=$(addprefix $(EXPORT_OBJS_DIR),$(SOURCES:%.cpp=%.gcda))
   FILES_TO_CLEAN+=$(addprefix $(EXPORT_OBJS_DIR),$(SOURCES:%.cpp=%.o))
   FILES_TO_CLEAN+=$(shell ls *.gcov 2> /dev/null)
    ifeq ($(findstring cover,$(MAKECMDGOALS)),cover)
        FILES_TO_CLEAN+=$(addprefix $(EXPORT_OBJS_DIR),$(SOURCES))
        TO_COPY+=$(addprefix $(EXPORT_OBJS_DIR),$(SOURCES))
    endif
endif

ifdef EXPORT_INCLUDES
   $(shell mkdir -p $(EXPORT_INCLUDES_DIR))
   EXPORTED_INCLUDES=$(addprefix $(EXPORT_INCLUDES_DIR),$(EXPORT_INCLUDES))
   BUILD_DEPS+=$(EXPORTED_INCLUDES)
   FILES_TO_CLEAN+=$(EXPORTED_INCLUDES)
endif

ifdef MAKE_DIRS
   FOLDERS_TO_BUILD=$(MAKE_DIRS)
   FOLDERS_TO_CLEAN=$(MAKE_DIRS)
endif

ifdef TARGET_LIB
   $(shell mkdir -p $(EXPORT_LIB_DIR))
   LIB_TO_BUILD=$(addsuffix .a,$(EXPORT_LIB_DIR)$(TARGET_LIB))
   BUILD_DEPS+=$(LIB_TO_BUILD)
   FILES_TO_CLEAN+=$(LIB_TO_BUILD)
endif

ifdef EXECUTABLE   
   BUILD_DEPS+=EXEC
   EXEC_TO_BUILD=$(PROJECT_ROOT_DIR)$(EXECUTABLE)
   FILES_TO_CLEAN+=$(EXEC_TO_BUILD)
endif

ifdef BUILD_TIME_TESTS
   $(shell mkdir -p $(EXPORT_TESTS_TO))
   testCmd=RUN_AUTO_TEST
   ifeq ($(findstring memtest,$(MAKECMDGOALS)),memtest)
	   testCmd=VALGRIND_AUTO_TESTS
   endif
   ifeq ($(findstring gdbtest,$(MAKECMDGOALS)),gdbtest)
	   testCmd=GDB_AUTO_TESTS
   endif
   ifeq ($(findstring profile,$(MAKECMDGOALS)),profile)
     $(shell mkdir -p $(EXPORT_PROFILE_DIR))
     testCmd=BUILD_PROFILE_PAGE
   endif
   BUILD_DEPS+=$(testCmd)
   TESTS_TO_BUILD=$(addprefix $(EXPORT_TESTS_TO),$(BUILD_TIME_TESTS))
   TESTS_TO_RUN=$(TESTS_TO_BUILD)
   FILES_TO_CLEAN+=$(TESTS_TO_BUILD)
   FILES_TO_CLEAN+=$(shell ls *.gcda)
   FILES_TO_CLEAN+=$(shell ls *.gcno)
endif

ifdef LINKED_LIBS
   LINKED_FILES+=$(addprefix $(EXPORT_LIB_DIR),$(addsuffix .a,$(LINKED_LIBS)))
endif

ifdef CPP_TAGS_FILE
   $(shell mkdir -p $(EXPORT_TAGS_DIR))
   CPP_TAGS_TO_BUILD=$(EXPORT_TAGS_DIR)$(CPP_TAGS_FILE)
   BUILD_DEPS+=$(CPP_TAGS_TO_BUILD)
endif

ifeq ($(strip $(FILES_TO_CLEAN)),)
    CLEAN_CMD=@echo "nothing to clean"
else
    CLEAN_CMD=rm $(FILES_TO_CLEAN)
endif


all: $(BUILD_DEPS) $(TO_COPY)
memtest: all
gdbtest: all
cover: all 
profile: all
coverbuild: GEN_COVER
coverview: VIEW_COVER

profileview:
	$(WEB_VIEWER) $(EXPORT_PROFILE_DIR)index.html

clean: FOLDERS_TO_CLEAN 
	$(CLEAN_CMD)

EXEC: $(TO_BUILD) $(LINKED_FILES)
	g++ $(CPP_FLAGS) -o $(EXEC_TO_BUILD) $(TO_BUILD) $(LINKED_FILES)

VIEW_COVERAGE:
	@if [ "$(SOURCES)" != "" ]; \
	then for f in $(SOURCES); do \
		gcov -f -o $(EXPORT_OBJS_DIR) $$f | c++filt;\
	done;\
	fi

FOLDERS_TO_CLEAN:
	@for dir in $(FOLDERS_TO_BUILD); do  \
		$(MAKE) -C $$dir clean;         \
		echo "***********************************************************"; \
		echo "Cleaned: $$dir ";\
		echo "************************************************************"; \
	done                                 
 
# Macro for building subfolders
BUILD_FOLDERS :
	@for dir in $(FOLDERS_TO_BUILD); do  \
		$(MAKE) -C $$dir $(MAKECMDGOALS) || exit;        \
		echo "***********************************************************"; \
		echo "Built successfully: $$dir ";\
		echo "************************************************************"; \
	done

RUN_AUTO_TEST: BUILD_AUTO_TESTS
	@ulimit -c unlimited; \
	for test in $(TESTS_TO_RUN); do \
		if [ -e core ]; then \
			rm core;\
		fi;\
		rm -f OverviewLog_*; \
		rm -f FullLog_*; \
		echo "***********************************************************"; \
		echo "Running auto test: $$test";\
		$$test || if [ -e core ]; then gdb $$test core; exit; else exit; fi;\
		echo "************************************************************"; \
	done

VALGRIND_AUTO_TESTS: BUILD_AUTO_TESTS
	@for test in $(TESTS_TO_RUN); do \
		echo "***********************************************************"; \
		echo "Running auto test: $$test";\
		    valgrind $(VALGRIND_OPTIONS) $$test || exit;\
		echo "************************************************************"; \
	done

GDB_AUTO_TESTS: BUILD_AUTO_TESTS
	@echo "***********************************************************"; \
	echo "           Running auto tests under gdb                    "; \
        echo " Setup File:  $(PROJECT_ROOT_DIR)/.gdb_setup"; \
	echo "***********************************************************"; \
	for test in $(TESTS_TO_RUN); do \
		passed=1;\
		echo -n "$$(basename $$test)";\
		gdb $(GDB_OPTIONS) $$test || passed=0; \
		if [ $$passed -eq 1 ]; then \
			echo "$$(basename $$test) - PASSED"; \
		else \
			echo "$$(basename $$test) - FAILED"; \
	                echo "***********************************************************"; \
			exit 1;\
		fi \
	done; \
	echo "***********************************************************"; \

PROFILE_TESTS: BUILD_AUTO_TESTS
	@for test in $(TESTS_TO_RUN); do\
		echo "***********************************************************"; \
		echo "Running auto test: $$test";\
		     $$test || exit;\
		echo "Profiling: $$test";\
		     gprof $$test > $(EXPORT_PROFILE_DIR)/$$(basename $$test).profile  || exit;\
		echo "Generating profile html";\
		     $(SCRIPTS_DIR)/prof2html.py $(EXPORT_PROFILE_DIR)/$$(basename $$test).profile || exit;\
		echo "************************************************************"; \
		rm gmon.out; \
	done

BUILD_PROFILE_PAGE: PROFILE_TESTS
	@echo "<html> <body><h1> Test Profiles </h1>" > $(EXPORT_PROFILE_DIR)index.html;\
	echo "<ul>" >> $(EXPORT_PROFILE_DIR)index.html;\
	for f in $$(ls $(EXPORT_PROFILE_DIR)*.html); do\
		echo "<li> <a href=\"$$f\"> $$(basename $$f .profile.html) </a> </li>" >> $(EXPORT_PROFILE_DIR)index.html;\
	done;\
	echo "</ul></body></html>" >> $(EXPORT_PROFILE_DIR)index.html

BUILD_AUTO_TESTS: $(TESTS_TO_BUILD)

GEN_COVER: 
	lcov --capture --directory $(PROJECT_ROOT_DIR) --output-file $(EXPORT_COVER_DIR)test.info
	genhtml -f --demangle-cpp  --legend --num-spaces 4 -s $(EXPORT_COVER_DIR)test.info --output-directory $(EXPORT_COVER_DIR)

VIEW_COVER:
	$(WEB_VIEWER) $(EXPORT_COVER_DIR)index.html


$(EXPORT_TESTS_TO)%: %.cpp $(LINKED_FILES)
	g++ $(CPP_FLAGS) $(TEST_CPP_FLAGS) -o $@ $+ $(LINKED_FILES)

# Macro for building STATIC libraries
$(LIB_TO_BUILD): $(TO_BUILD)
	ar -cr 	$@ 	$+

# Macro for moving include files to the includes directory. 
$(EXPORT_INCLUDES_DIR)%: %
	cp $+ $@

# Macro for copying source code when using coverage testing
$(EXPORT_OBJS_DIR)%.cpp: %.cpp
	cp $+ $@

# Macro for building object files
$(EXPORT_OBJS_DIR)%.o: %.cpp
	g++  $(CPP_FLAGS) -c -o $@ $+

ifneq ($(strip $(CPP_TAGS_TO_BUILD)),)
#rebuild the tags file if anything has changed
$(CPP_TAGS_TO_BUILD): $(subst $(CPP_TAGS_TO_BUILD),,$(BUILD_DEPS))
	$(CTAGS) $(CTAGS_FLAGS) -f $(CPP_TAGS_TO_BUILD) $(PWD)
endif

usage:
	@echo "Set the base directory: export PROJECT_ROOT_DIR=<location of makefile.include>"
	@echo "To change the web browser: export WEB_VIEWER=<viewer>"
	@echo ""
	@echo "        TARGETS"
	@echo "MAKE_DIRS                                   List of directories to enter and build"
	@echo "    <$(MAKE_DIRS)>"
	@echo "TARGET_LIB          (<exports>/lib/%.a)     Static library (%.a) to build"
	@echo "    <$(TARGET_LIB)>"
	@echo "EXPORT_INCLUDES     (<exports>/includes/%)  Copy listed files to the includes directory"
	@echo "    <$(EXPORT_INCLUDES)>"
	@echo "EXECUTABLE          (<project root>/%)      Build the stated executable"
	@echo "    <$(EXECUTABLE)>"
	@echo "BUILD_TIME_TESTS    (<exports>/tests/%)     Build all %.cpp files into % tests, and run them"
	@echo "    <$(BUILD_TIME_TESTS)>"
	@echo "LINKED_LIBS                                 %.a files to link against"
	@echo "    <$(LINKED_LIBS)>"
	@echo "CPP_TAGS_FILE       (<exports/tags/%)       name of ctags file for this directory"
	@echo "    <$(CPP_TAGS_FILE)>"
	@echo ""
	@echo "        Compiler Options"
	@echo "ADDITIONAL_INCLUDE_FLAGS:  ()        Add extra inclue directories                               <$(ADDITIONAL_INCLUDE_FLAGS)>"
	@echo "ADDITIONAL_TEST_CPP_FLAGS: ()        Add extra inclue directories                               <$(ADDITIONAL_INCLUDE_FLAGS)>"
	@echo "CPPSTD:                    (gnu++98) SetSet the C++ standard to be used by g++, e.g             <$(CPPSTD)>"
	@echo "CPP_FLAGS:                 ()        Flags passed to g++                                        <$(CPP_FLAGS)>" 
	@echo "CPP_PROFILE_FLAGS          (-pg -O2 -march=native) CPP Flags used when profiling.               <$(CPP_PROFILE_FLAGS)>"
	@echo "DEBUG_ON:                  (YES)     To disable debug symbols: export DEBUG_ON=FALSE            <$(DEBUG_ON)>"
	@echo "FATAL_WARNINGS             (YES)     Set to NO to prevent compiler warnings breaking the build  <$(FATAL_WARNINGS)>"
	@echo "USE_CPP11:                 (NO)      To use the CPP11 std, set USE_CPP11=YES                    <$(USE_CPP11)>"
	@echo ""
	@echo "        CTAGS"
	@echo "CTAGS:                    (ctags)   Set the ctags executable <$(CTAGS)>"
	@echo "CTAGS_FLAGS:              (-R --sort=1 --c++-kinds=+p --fields=+iaS --extra=+q --language-force=C++ --tag-relative=no)"
	@echo "                          <$(CTAGS_FLAGS)>"
	@echo ""
	@echo "Tests:"
	@echo "tests defiend in the tests dicectory are exectuted automatically, every time the project is built"
	@echo "There are some additional options when handling tests:"
	@echo "   To valgrind tests: : make memtest"
	@echo "       Works on an ordinary debug build, the build will fail if valgrind identifies any errors"
	@echo ""
	@echo "   To run gdb over the tests: make gdbtest"
	@echo "       This exectutes all tests in a gdb enviroment that has source .gdb_setup and .gdb_breakpoints"
	@echo "       The idea is two set a breakpoint at the test / function you are interested"
	@echo "       breakpoints.vim has been confiured to make this trivial from inside the Vim editor"
	@echo ""
	@echo "   To coverage test the tests:"
	@echo "       make cover       : standard build, but with coverage enabled (ideally should be a clean build)"
	@echo "       make coverbuild  : Build the htmlpages from the coverage data (depends on lcov)"
	@echo "       make coverview   : Open coverage data in a web browser"
	@echo ""
	@echo "   To profile the tests:"
	@echo "       WARNING: In order to increase the accuracy of the profile, proifle build is configured to repeat tests"
	@echo "                many times"
	@echo "       WARNING: Profiling should be done with a clean build"
	@echo "       WARNING: To be realistic, profiling disables debuging, and enabled basic optimisation: -O2 -march=native"
	@echo "       make profile     : Build the project, and profile the tests"
	@echo "       make profileview : Open the profile data in a web browser"
	@echo ""
	@echo "       export PROFILE_SECS=<seconds=5>: Time to loop over tests for to build up a better profile "
